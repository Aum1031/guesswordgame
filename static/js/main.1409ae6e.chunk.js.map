{"version":3,"sources":["components/Letters/Letter.tsx","components/Alphabet/Alphabets.tsx","components/GameResult/GameResult.tsx","components/TriesLeft/TriesLeft.tsx","components/NewWord/NewWord.tsx","components/Word/Word.tsx","containers/App.tsx","serviceWorker.ts","index.tsx"],"names":["renderLetterElement","letter","disabled","role","ariaLabel","aria-label","Letter","onClick","classes","classNames","space","dash","className","aria-disabled","Alphabets","letters","map","index","key","GameResult","guessedTheWord","guessesLeft","inProgress","aria-hidden","lastChance","lost","won","TriesLeft","triesLeft","NewWord","getAriaLabel","word","pronouncedWord","join","Word","aria-describedby","App","props","state","initialState","selectLetter","bind","startNewGame","getWordFromApi","addKeyPressListener","alphabets","Array","from","guessedLetters","Set","axios","get","then","response","result","words","data","split","randomWord","setState","error","console","log","this","Math","floor","random","length","toUpperCase","selectedLetter","updateGameStatus","nextState","alreadyGuessedLetter","has","add","find","filter","includes","every","lettersFoundInWord","forEach","window","location","reload","document","addEventListener","event","Component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1409ae6e.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport './Letter.css'\n\ninterface Props {\n  disabled: boolean\n  letter: string\n  onClick(letter: string): void\n  role?: string\n}\n\nconst Letter: FunctionComponent<Props> = ({\n  disabled,\n  letter,\n  onClick,\n  role\n}) => {\n  const classes = classNames(\n    'Letter',\n    { space: letter === ' ' },\n    { dash: letter === '-' },\n    { disabled: disabled }\n  )\n\n  return (\n    <li\n      className={classes}\n      role={role}\n      onClick={() => onClick(letter)}\n      aria-disabled={disabled ? 'true' : false}\n    >\n      {renderLetterElement(letter, disabled, role)}\n    </li>\n  )\n}\n\nconst renderLetterElement = (\n  letter: string,\n  disabled: boolean,\n  role?: string\n) => {\n  if (role === 'button') {\n    const ariaLabel: string = disabled ? letter : 'blank'\n\n    return (\n      <button aria-label={ariaLabel} disabled={disabled}>\n        {letter}\n      </button>\n    )\n  } else if (letter === '-') {\n    return <span>{letter}</span>\n  } else if (!disabled) {\n    return <span>&nbsp;</span>\n  }\n\n  return <span>{letter}</span>\n}\n\nLetter.propTypes = {\n  disabled: PropTypes.bool.isRequired,\n  letter: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  role: PropTypes.string\n}\n\nexport interface LetterType {\n  letter: string\n  disabled: boolean\n}\n\nexport default Letter\n","import React, { FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Letter, { LetterType } from '../Letters/Letter'\nimport './Alphabets.css'\n\ninterface Props {\n    letters: LetterType[]\n    onClick(letter: string): void\n}\n\nexport const Alphabets: FunctionComponent<Props> =({ letters, onClick }) => (\n    <ul className=\"Alphabets\">\n        {[...letters].map((letter, index) => {\n            return (\n                <Letter \n                  key={index}\n                  letter={letter.letter}\n                  disabled={letter.disabled}\n                  onClick={onClick}\n                  role=\"button\"\n                />\n            )\n        })}\n    </ul>\n)\n\nAlphabets.propTypes = {\n    letters: PropTypes.array.isRequired,\n    onClick: PropTypes.func.isRequired\n}\n","import React, { FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport './GameResult.css'\n\ninterface Props {\n  guessedTheWord: boolean\n  guessesLeft: number\n}\n\nconst GameResult: FunctionComponent<Props> = ({\n  guessedTheWord,\n  guessesLeft\n}) => {\n  const inProgress = <i className=\"fa fa-smile-o\" aria-hidden=\"true\" />\n  const lastChance = <i className=\"fa fa-frown-o\" aria-hidden=\"true\" />\n  const lost = <i className=\"fa fa-thumbs-down\" aria-hidden=\"true\" />\n  const won = <i className=\"fa fa-thumbs-o-up\" aria-hidden=\"true\" />\n\n  return guessedTheWord ? (\n    <div className=\"GameResult\" aria-label=\"You won the game! Congratulations!\">\n      {won}\n    </div>\n  ) : guessesLeft > 1 ? (\n    <div className=\"GameResult\" aria-label=\"Game is in progress.\">\n      {inProgress}\n    </div>\n  ) : guessesLeft === 1 ? (\n    <div\n      className=\"GameResult\"\n      aria-label=\"You can guess wrong only one more time.\"\n    >\n      {lastChance}\n    </div>\n  ) : (\n    <div className=\"GameResult\" aria-label=\"You lost the game. Try again!\">\n      {lost}\n    </div>\n  )\n}\n\nGameResult.propTypes = {\n  guessedTheWord: PropTypes.bool.isRequired,\n  guessesLeft: PropTypes.number.isRequired\n}\n\nexport default GameResult\n","import React, { FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport './TriesLeft.css'\n\ninterface Props {\n triesLeft: number\n}\n\nconst TriesLeft: FunctionComponent<Props> = ({ triesLeft }) => {\n  const ariaLabel: string = `Tries left: ${triesLeft}`\n\n  return (\n    <div className=\"TriesLeft\" aria-label={ariaLabel}>\n      Tries Left: {triesLeft}\n    </div>\n  )\n}\n\nTriesLeft.propTypes = {\n  triesLeft: PropTypes.number.isRequired\n}\n\nexport default TriesLeft\n","import React, { FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport './NewWord.css'\n\ninterface Props {\n  onClick(): void\n}\n\nconst NewWord: FunctionComponent<Props> = ({ onClick }) => (\n  <button\n    className=\"NewWord\"\n    onClick={() => onClick()}\n    aria-label=\"Start a new game\"\n  >\n    New Game\n  </button>\n)\n\nNewWord.propTypes = {\n  onClick: PropTypes.func.isRequired\n}\n\nexport default NewWord\n","import React, { Fragment, FunctionComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Letter, { LetterType } from '../Letters/Letter'\nimport './Word.css'\n\ninterface Props {\n  guessedTheWord: boolean\n  word: LetterType[]\n}\n\nconst Word: FunctionComponent<Props> = ({ guessedTheWord, word }) => {\n  const ariaLabel: string = getAriaLabel(word, guessedTheWord)\n  const ariaDescribedBy: string = 'word-description'\n\n  return (\n    <Fragment>\n      <ul\n        className=\"Word\"\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedBy}\n      >\n        {[...word].map((letter, index) => (\n          <Letter\n            key={index}\n            letter={letter.letter}\n            disabled={letter.disabled}\n            onClick={() => {}}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  )\n}\n\nconst getAriaLabel = (word: LetterType[], guessedTheWord: boolean): string => {\n  const pronouncedWord = guessedTheWord\n    ? word\n    : [...word]\n        .map((letter, index) => (letter.disabled ? letter.letter : 'blank'))\n        .join(', ')\n\n  return `Word: ${pronouncedWord}`\n}\n\nWord.propTypes = {\n  guessedTheWord: PropTypes.bool.isRequired,\n  word: PropTypes.array.isRequired\n}\n\nexport default Word\n","import React, { Component, Fragment } from 'react'\nimport axios from 'axios'\nimport { Alphabets } from './../components/Alphabet/Alphabets'\nimport GameResult from './../components/GameResult/GameResult'\nimport TriesLeft from './../components/TriesLeft/TriesLeft'\nimport { LetterType } from './../components/Letters/Letter'\nimport NewWord from './../components/NewWord/NewWord'\nimport Word from './../components/Word/Word'\nimport './App.css'\n\ninterface State {\n  alphabets: string\n  letters: LetterType[]\n  guessedLetters: Set<string>\n  guessedTheWord: boolean\n  triesLeft: number\n  word: LetterType[] | null\n}\n\nclass App extends Component<{}, State> {\n  constructor(props: {}) {\n    super(props)\n    this.state = this.initialState()\n    this.selectLetter = this.selectLetter.bind(this)\n    this.startNewGame = this.startNewGame.bind(this)\n    this.getWordFromApi = this.getWordFromApi.bind(this)\n    this.addKeyPressListener()\n  }\n\n  initialState(): State {\n    const alphabets: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    const letters: LetterType[] = Array.from(alphabets).map(letter => ({\n      letter,\n      disabled: false\n    }))\n\n    const word: LetterType[] | null = null\n    const guessedLetters: Set<string> = new Set()\n    const triesLeft: number = 6\n    const guessedTheWord: boolean = false\n\n    return {\n      alphabets,\n      letters,\n      word,\n      guessedLetters,\n      triesLeft,\n      guessedTheWord\n    }\n  }\n\n  getWordFromApi():void {\n    axios.get('http://app.linkedin-reach.io/words')\n      .then(response => response)\n      .then(\n        (result) => {\n          const words = result.data.split('\\na');\n          const word: LetterType[] = Array.from(this.randomWord(words)).map(\n            letter => ({\n              letter,\n              disabled: false\n            })\n          )\n          this.setState({ word });\n        },\n        (error) => {\n          console.log(error)\n        }\n      )\n  }\n\n  componentDidMount(){\n    this.getWordFromApi();\n  }\n\n\n  randomWord(words: any[] ): string {\n    return words[\n      Math.floor(Math.random() * words.length)\n    ].toUpperCase()\n  }\n\n  selectLetter(selectedLetter: string): void {\n    this.updateGameStatus(this.state, selectedLetter)\n  }\n\n  updateGameStatus(state: State, selectedLetter: string): void {\n    \n      if (state.triesLeft > 0 && !state.guessedTheWord) {\n        const nextState: State = { ...state }\n        const alreadyGuessedLetter: boolean = state.guessedLetters.has(\n          selectedLetter\n        )\n        if(nextState.word){\n        if (!alreadyGuessedLetter) {\n          nextState.guessedLetters.add(selectedLetter)\n          const letter: LetterType | undefined = nextState.letters.find(\n            letter => letter.letter === selectedLetter\n          )\n  \n          if (letter) {\n            letter.disabled = true\n          }\n        }\n        \n        const guessedTheWord: boolean = nextState.word\n          .filter(letter => !['-', ' '].includes(letter.letter))\n          .every(letter => nextState.guessedLetters.has(letter.letter))\n  \n        const lettersFoundInWord: boolean =\n          nextState.word.filter(letter => letter.letter === selectedLetter)\n            .length > 0\n  \n        if (guessedTheWord) {\n          nextState.guessedTheWord = true\n        } else if (!alreadyGuessedLetter && !lettersFoundInWord) {\n          nextState.triesLeft--\n        }\n  \n        nextState.word.forEach(letter =>\n          letter.letter === selectedLetter ? (letter.disabled = true) : ''\n        )\n  \n        this.setState(nextState)\n      }\n    } \n  }\n\n  startNewGame(): void {\n    window.location.reload()\n  }\n\n  addKeyPressListener(): void {\n    document.addEventListener('keydown', event => {\n      const letter: string = event.key.toUpperCase()\n\n      if (this.state.alphabets.includes(letter)) {\n        this.selectLetter(letter)\n      }\n    })\n  }\n\n  render() {\n    if (!this.state.word) {\n      return <div className=\"fa fa-spinner\" aria-hidden=\"true\"></div>;\n    }\n  \n    return (\n      <Fragment>\n        <p className=\"info\">\n          Welcome to play word guess game. Use keyboard to guess the letters.\n        </p>\n        <Word\n          word={this.state.word}\n          guessedTheWord={this.state.guessedTheWord}\n        />\n        <div className=\"game\">\n          <TriesLeft triesLeft={this.state.triesLeft} />\n          <GameResult\n            guessedTheWord={this.state.guessedTheWord}\n            guessesLeft={this.state.triesLeft}\n          />\n          <NewWord onClick={this.startNewGame} />\n        </div>\n        <Alphabets letters={this.state.letters} onClick={this.selectLetter} />\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}